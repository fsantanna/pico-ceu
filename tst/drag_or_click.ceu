^["pico.ceu"]

pico_state_set_title("pico-Ceu: Click, Drag, or Cancel")

spawn {
    var rect = [10,10, 5,5]
    spawn {
        every :draw {
            pico_state_set_color_clear(0,0,0,255)
            pico_output_draw_rect(rect)
        }
    }
    while true {
        await (evt is :mousebuttondown) and
              pico_point_vs_rect?([evt.0,evt.1],rect)
        println("> clicking...")
        var orig  = copy(rect)
        var click = [evt.0, evt.1]
        paror {
            await (evt is :keydown) and (evt.1 == :Key.Escape)
            set rect = copy(orig)
            println("<<< Cancelled!")
        } with {
            await :mousemotion
            println("> dragging...")
            awaiting :mousebuttonup {
                while true {
                    set rect.0 = orig.0 + (evt.0 - click.0)
                    set rect.1 = orig.1 + (evt.1 - click.1)
                    await :mousemotion
                }
            }
            println("<<< Dragged!")
        } with {
            await :mousebuttonup
            println("<<< Clicked!")
        }
    }
}

pico_loop()
