^["pico.ceu"]

pico_state_set_title("pico-Ceu: Click, Drag, or Cancel")

spawn {
    var rect = [10,10, 5,5]
    spawn {
        every evt_type?(:draw) {
            pico_state_set_color_clear(0,0,0,255)
            pico_output_draw_rect(rect)
        }
    }
    while true {
        await evt_type?(:mousebuttondown) and
              pico_point_vs_rect?([evt.x,evt.y], rect)
        println("> clicking...")
        var orig  = [rect.0, rect.1, rect.2, rect.3]
        var click = [evt.x, evt.y]
        paror {
            await evt_type?(:keydown) and evt.sym==`:number SDLK_x`
            set rect = [orig.0, orig.1, orig.2, orig.3]     ;; TODO: bad
            println("<<< Cancelled!")
        } with {
            await evt_type?(:mousemotion)
            println("> dragging...")
            awaiting evt_type?(:mousebuttonup) {
                while true {
                    set rect.0 = orig.0 + (evt.x - click.0)
                    set rect.1 = orig.1 + (evt.y - click.1)
                    await evt_type?(:mousemotion)
                }
            }
            println("<<< Dragged!")
        } with {
            await evt_type?(:mousebuttonup)
            println("<<< Clicked!")
        }
    }
}

pico_loop()
