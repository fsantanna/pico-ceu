^"int.ceu"
^"pico.ceu"

var rect: Rect = [[_10,_10],[_5,_5]]

spawn {
    loop {
        var dxy: Size
        {
            var mouse: Point
            await evt?MouseButtonDown until isPointVsRect [mouse,rect]
                where {
                    set mouse = evt!MouseButtonDown.pos
                }
            set dxy = [sub [rect.pos.x,mouse.x], sub [rect.pos.y,mouse.y]]
        }
        paror {
            var orig = rect
            await evt?KeyDown until eq [evt!KeyDown,_SDLK_ESCAPE]
            set rect = orig
            output std _("Cancelled!"):_(char*)
        } with {
            await evt?MouseMotion
            output std _("Dragging..."):_(char*)
            var mouse = evt!MouseMotion
            watching evt?MouseButtonUp {
                loop {
                    set rect = [pt, rect.size]
                        where {
                            var pt: Point = [add [mouse.x,dxy.w], add [mouse.y,dxy.h]]
                        }
                    await evt?MouseMotion
                    set mouse = evt!MouseMotion
                }
            }
            output std _("Dropped!"):_(char*)
        } with {
            await evt?MouseButtonUp
            output std _("Clicked!"):_(char*)
        }
    }
}

spawn {
    loop {
        await _1
        output pico Pico.Clear
        output pico Pico.Draw_Rect rect
        output pico Pico.Present
    }
}

call pico_loop ()
