^["@/pico/pico.ceu"]

pico-state-set-size([810,610])
pico-state-set-title("pico-Ceu: Click, Drag, or Cancel")
pico-state-set-font("tiny.ttf", 10)

spawn (task () {
    var text = " "
    var rect :Rect = [[0,0],[10,10]]
    spawn (task () {
        loop {
            loop { ;; AWAIT
                break if yield(nil) thus { as it =>
                    is?(it, :Pico.Draw)
                }
            }
            pico-output-draw-rect(rect)
            pico-output-draw-text([0,-20], text)
        }
    }) ()
    loop {
        val click :XY = loop { ;; AWAIT
            break if yield(nil) thus { as it :Pico.Mouse =>
                if is?(it, :Pico.Mouse.Button.Dn) {
                    if pico-point-vs-rect?(it.pos,rect) {
                        copy(it.pos)
                    } else {
                        false
                    }
                } else {
                    false
                }
            }
        }
        set text = "... clicking ..."
        val orig  :Rect = copy(rect)

        val t1 = spawn (task () {
            loop { ;; AWAIT
                break if yield(nil) thus { as it :Pico.Key =>
                    if is?(it, :Pico.Key.Dn) {
                        (it.key == :Key-Escape)
                    } else {
                        false
                    }
                }
            }
            set rect = copy(orig)
            set text = "!!! CANCELLED !!!"
        }) ()

        val t2 = spawn (task () {
            var pos :XY = loop { ;; AWAIT
                break if yield(nil) thus { as it :Pico.Mouse =>
                    if is?(it, :Pico.Mouse.Motion) {
                        copy(it.pos)
                    } else {
                        false
                    }
                }
            }
            set text = "... dragging ..."
            spawn (task () {
                loop {
                    set rect.pos.x = orig.pos.x + (pos.x - click.x)
                    set rect.pos.y = orig.pos.y + (pos.y - click.y)
                    set pos = loop { ;; AWAIT
                        break if yield(nil) thus { as it :Pico.Mouse =>
                            if is?(it, :Pico.Mouse.Motion) {
                                copy(it.pos)
                            } else {
                                false
                            }
                        }
                    }
                }
            }) ()
            loop { ;; AWAIT
                break if yield(nil) thus { as it =>
                    is?(it, :Pico.Mouse.Button.Up)
                }
            }
            set text = "!!! DRAGGED !!!"
        }) ()

        val t3 = spawn (task () {
            loop { ;; AWAIT
                break if yield(nil) thus { as it =>
                    is?(it, :Pico.Mouse.Button.Up)
                }
            }
            set text = "!!! CLICKED !!!"
        }) ()

        loop { ;; AWAIT
            break if yield(nil) thus { as it =>
                (it==t1) || (it==t2) || (it==t3)
            }
        }
    }
}) ()

loop {
    val e = resume pico-coro ()
    break if do {
        if e {
            broadcast(e)
            is?(e, :Pico.Quit)
        } else {
            nil
        }
    }
}
