^["@/pico/pico.ceu"]

;; TITLE
pico.set.title("pico-Ceu")

;; SOUND
pico.output.sound("start.wav")

;; GET-SIZE
val [_,log:XY] = pico.get.size()
println(log)

val cnt = pico.pct-to-pos(1/2, 1/2)

;; CLEAR
pico.set.color.clear([255,255,255,255])
pico.output.clear()
pico.output.present()

pico.input.delay(2000)

;; DRAW-IMAGE
pico.set.anchor(:HAnchor-Center, :VAnchor-Middle)
pico.output.draw.image(cnt, "open.png")
pico.output.present()

pico.input.delay(2000)

;; CROP-IMAGE
pico.set.image.crop([[0,0],[24,24]])
pico.set.image.size([24,24])
pico.output.draw.image(cnt, "open.png")
pico.output.present()

pico.input.delay(2000)

;; DRAW-PIXEL
pico.set.color.clear([0,0,0,255])
pico.set.color.draw([255,255,255,255])
pico.output.draw.pixel(cnt)
pico.output.present()

pico.input.delay(2000)

;; DRAW-TEXT
pico.set.font("tiny.ttf", 10)
pico.output.draw.text(cnt, "Hello!")
pico.output.present()

pico.input.delay(2000)

;; SET-GRID
pico.set.grid(false)
pico.output.present()

pico.input.delay(2000)

;; WRITE
pico.set.cursor(pico.pct-to-pos(1/5,1/5))
pico.output.write("1 ")
pico.output.write("2 ")
pico.output.writeln("3")
pico.output.writeln("")
pico.output.writeln("pico")
pico.output.present()

pico.input.delay(2000)

;; SET-FONT
pico.set.font("tiny.ttf", 5)
pico.output.writeln("pico")
pico.output.present()

pico.input.delay(2000)

;; MOUSE
val e :Pico.Mouse.Button = pico.input.event(:Pico.Mouse.Button.Dn)
pico.output.draw.pixel([e.pos.x,e.pos.y])
pico.output.present()

pico.input.delay(2000)

;; SET-GRID
pico.set.grid(true)

;; DRAW-LINE
pico.output.draw.line(pico.pct-to-pos(0,1), pico.pct-to-pos(1,0))
pico.output.draw.line(pico.pct-to-pos(0,0), pico.pct-to-pos(1,1))

;; DRAW-RECT
pico.output.draw.rect([cnt,[21,21]])

;; DRAW-OVAL
pico.output.draw.oval([pico.pct-to-pos(2/3,1/2),[6,6]])

;; SET-ANCHOR
pico.set.anchor(:HAnchor-Right, :VAnchor-Top)
pico.output.draw.rect([pico.pct-to-pos(1,0),[5,5]])

pico.output.present()
pico.input.delay(2000)

;; SET-ZOOM

pico.set.size(nil, [log.x*0.9,log.y*0.9])
pico.output.draw.pixel(pico.pct-to-pos(1/2,1/2))
pico.output.present()
pico.input.delay(500)

pico.set.size(nil, [log.x*0.8,log.y*0.8])
pico.output.draw.pixel(pico.pct-to-pos(1/2,1/2))
pico.output.present()
pico.input.delay(500)

pico.set.size(nil, [log.x*0.7,log.y*0.7])
pico.output.draw.pixel(pico.pct-to-pos(1/2,1/2))
pico.output.present()
pico.input.delay(500)

pico.set.size(nil, [log.x*0.6,log.y*0.6])
pico.output.draw.pixel(pico.pct-to-pos(1/2,1/2))
pico.output.present()
pico.input.delay(500)

pico.set.size(nil, [log.x*0.5,log.y*0.5])
pico.output.draw.pixel(pico.pct-to-pos(1/2,1/2))
pico.output.present()
pico.input.delay(500)

;; SET-PAN

val pos = pico.pct-to-pos(1/2,1/2)

pico.set.pan([0,0])
pico.output.draw.pixel(pos)
pico.output.present()
pico.input.delay(500)

pico.set.pan([5,5])
pico.output.draw.pixel(pos)
pico.output.present()
pico.input.delay(500)

pico.set.pan([10,10])
pico.output.draw.pixel(pos)
pico.output.present()
pico.input.delay(500)

pico.set.pan([5,5])
pico.output.draw.pixel(pos)
pico.output.present()
pico.input.delay(500)

pico.set.pan([0,0])
pico.output.draw.pixel(pos)
pico.output.present()
pico.input.delay(500)

pico.input.delay(2000)

pico.set.size(nil, [64,36])
pico.output.draw.pixel(pico.pct-to-pos(1/2,1/2))
pico.output.present()

pico.input.delay(2000)
