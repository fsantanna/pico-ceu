-- ULeft,   UCenter, URight
-- UBottom, UMiddle, UTop
#define THAnchor <(),(),()>
#define TVAnchor <(),(),()>

#define TEvent <                             \
    ()                , -- UAny              \
    _int              , -- UKeyDown          \
    [_int,[_int,_int]]  -- UMouseButtonDown  \
>

#define TPico <                                         \
    _int                        , -- UDelay             \
    _int                        , -- UEvent             \
    [_int,_int]                 , -- UEvent_Timeout     \
    ()                          , -- UPresent           \
    ()                          , -- UClear             \
    [_int,_int]                 , -- UDraw_Pixel        \
    [[_int,_int],[_int,_int]]   , -- UDraw_Line         \
    [[_int,_int],[_int,_int]]   , -- UDraw_Rect         \
    [[_int,_int],_(char*)]      , -- UDraw_Text         \
    /[_int,_int]                , -- UGet_Size          \
    [THAnchor,TVAnchor]         , -- USet_Anchor        \
    ()                          , -- USet_Auto          \
    [_int,_int,_int,_int]       , -- USet_Color_Clear   \
    [_int,_int,_int,_int]       , -- USet_Color_Draw    \
    [_int,_int]                 , -- USet_Cursor        \
    [_(char*),_int]             , -- USet_Font          \
    _int                        , -- USet_Grid          \
    [_int,_int]                 , -- USet_Pan           \
    [_int,_int]                 , -- USet_Size          \
    _(char*)                    , -- USet_Title         \
    [_int,_int]                 , -- USet_Zoom          \
    _(char*)                    , -- UWrite             \
    _(char*)                      -- UWriteLn           \
>

-- xTPico
#define UDelay              1
#define UEvent              2
#define UEvent_Timeout      3
#define UPresent            4
#define UClear              5
#define UDraw_Pixel         6
#define UDraw_Line          7
#define UDraw_Rect          8
#define UDraw_Text          9
#define UGet_Size           10
#define USet_Anchor         11
#define USet_Auto           12
#define USet_Color_Clear    13
#define USet_Color_Draw     14
#define USet_Cursor         15
#define USet_Font           16
#define USet_Grid           17
#define USet_Pan            18
#define USet_Size           19
#define USet_Title          20
#define USet_Zoom           21
#define UWrite              22
#define UWriteLn            23

-- xTEvent
#define UAny                1
#define UKeyDown            2
#define UMouseButtonDown    3

-- xAnchor
#define ULeft       1
#define UCenter     2
#define URight      3
#define UBottom     1
#define UMiddle     2
#define UTop        3

#define SPico U_int_int_T_int_int_T_Unit_Unit_T_int_int_T_T_T_int_int_T_T_int_int_T_T_T_T_int_int_T_T_int_int_T_T_T_T_int_int_T_char__T_P_T_int_int_T_P_T_U_Unit_Unit_Unit_U_U_Unit_Unit_Unit_U_T_Unit_T_int_int_int_int_T_T_int_int_int_int_T_T_int_int_T_T_char__int_T_int_T_int_int_T_T_int_int_T_char__T_int_int_T_char__char__U

#define SEvent U_Unit_int_T_int_T_int_int_T_T_U

var xxx: TEvent

-------------------------------------------------------------------------------

native _{
    void output_pico (struct SPico arg) {
        switch (arg.tag) {
            case USet_Anchor: {
                // TODO: _11
                Pico_IO io = { PICO_SET_ANCHOR, .Set_Anchor = {arg._11._1.tag,arg._11._2.tag} };
                pico_output(io);
                break;
            }
            default:
                pico_output(*(Pico_IO*)&arg);
                break;
        }
    }

    int tosdl (int e) {
        switch (e) {
            case UAny:               return SDL_ANY;
            case UKeyDown:           return SDL_KEYDOWN;
            case UMouseButtonDown:   return SDL_MOUSEBUTTONDOWN;
        }
        assert(0);
    }

    void toce (SDL_Event* e, struct SEvent* arg) {
        switch (e->type) {
            case SDL_KEYDOWN:
                // TODO: _2
                *arg = (struct SEvent) { UKeyDown, { ._2 = e->key.keysym.sym } };
                break;
            case SDL_MOUSEBUTTONDOWN: {
                int bt = e->button.button;
                int x  = e->button.x;
                int y  = e->button.y;
                // TODO: _3
                *arg = (struct SEvent) { UMouseButtonDown, { ._3 = {bt,{x,y}} } };
                break;
            }
        }
    }

    struct SEvent input_pico_U_Unit_int_T_int_T_int_int_T_T_U (struct SPico arg) {
        SDL_Event e;
        switch (arg.tag) {
            case UEvent: {
                // TODO: _2
                pico_input(&e, (Pico_IO) {PICO_EVENT,.Event=arg._2});
                struct SEvent s;
                toce(&e, &s);
                return s;
            }
            case UEvent_Timeout: {
                // TODO: _3
                int ok = pico_input(&e, (Pico_IO) {
                    PICO_EVENT_TIMEOUT,
                    .Event_Timeout = { arg._3._1, arg._3._2 }
                });
                if (ok) {
                    struct SEvent s;
                    toce(&e, &s);
                    return s;
                }
                break;
            }
        }
    }

    void input_pico_Unit (struct SPico arg) {
        SDL_Event e;
        switch (arg.tag) {
            case UDelay:
                pico_input(&e, *((Pico_IO*)&arg));
                break;
            default:
                input_pico_U_Unit_int_T_int_T_int_int_T_T_U (arg);
                break;
        }
    }
}

call _pico_open ()
-- TODO: pico_close()
