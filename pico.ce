#define TEvent <                             \
    ()                , -- UAny              \
    _int              , -- UKeyDown          \
    [_int,[_int,_int]]  -- UMouseButtonDown  \
>

#define TPico <                         \
    _int            , -- UDelay         \
    /TEvent         , -- UEvent         \
    [/TEvent,_int]  , -- UEvent_Timeout \
    [_int,_int]     , -- UDraw_Pixel    \
    _(char*)          -- USet_Title     \
>

-- xTPico
#define UDelay          1
#define UEvent          2
#define UEvent_Timeout  3
#define UDraw_Pixel     4
#define USet_Title      5

-- xTEvent
#define UAny             1
#define UKeyDown         2
#define UMouseButtonDown 3

#define SPico U_int_P_U_Unit_int_T_int_T_int_int_T_T_U_P_T_P_U_Unit_int_T_int_T_int_int_T_T_U_P_int_T_T_int_int_T_char__U

-------------------------------------------------------------------------------

native _{
    void output_pico (struct SPico arg) {
        pico_output(*(Pico_IO*)&arg);
    }

    int tosdl (int e) {
        switch (e) {
            case UAny:               return SDL_ANY;
            case UKeyDown:           return SDL_KEYDOWN;
            case UMouseButtonDown:   return SDL_MOUSEBUTTONDOWN;
        }
        assert(0);
    }

    void input_pico_Unit (struct SPico arg) {
        Pico_IO* pico = (Pico_IO*) &arg;
        SDL_Event e;
        switch (arg.tag) {
            case UDelay:
                pico_input(*pico);
                break;
            case UEvent: {
                pico_input((Pico_IO) {PICO_EVENT,.Event={tosdl(arg._2->tag),&e}});
                //toce(arg.Event!.2)
                break;
            }
            case UEvent_Timeout: {
                pico_input((Pico_IO) {
                    PICO_EVENT_TIMEOUT,
                    .Event_Timeout = { tosdl(arg._3._1->tag), &e, arg._3._2 }
                });
            }
        }
    }
}

call _pico_open ()
-- TODO: pico_close()
