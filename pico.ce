-- ULeft,   UCenter, URight
-- UBottom, UMiddle, UTop
type THAnchor = <(),(),()>
type TVAnchor = <(),(),()>

type TEvent = <
    ()                , -- UAny
    ()                , -- UTimeout
    _int              , -- UKeyDown
    [_int,[_int,_int]]  -- UMouseButtonDown
>

type TPico = <
    _int                        , -- UDelay
    _int                        , -- UEvent
    [_int,_int]                 , -- UEvent_Timeout
    ()                          , -- UPresent
    ()                          , -- UClear
    [_int,_int]                 , -- UDraw_Pixel
    [[_int,_int],[_int,_int]]   , -- UDraw_Line
    [[_int,_int],[_int,_int]]   , -- UDraw_Rect
    [[_int,_int],_(char*)]      , -- UDraw_Text
    [[_int,_int],_(char*)]      , -- UDraw_Image
    /[_int,_int]                , -- UGet_Size
    [THAnchor,TVAnchor]         , -- USet_Anchor
    ()                          , -- USet_Auto
    [_int,_int,_int,_int]       , -- USet_Color_Clear
    [_int,_int,_int,_int]       , -- USet_Color_Draw
    [_int,_int]                 , -- USet_Cursor
    [_(char*),_int]             , -- USet_Font
    _int                        , -- USet_Grid
    [_int,_int]                 , -- USet_Pan
    [_int,_int]                 , -- USet_Size
    _(char*)                    , -- USet_Title
    [_int,_int]                 , -- USet_Zoom
    _(char*)                    , -- UWrite
    _(char*)                      -- UWriteLn 
>

-- xTPico
#define UDelay              1
#define UEvent              2
#define UEvent_Timeout      3
#define UPresent            4
#define UClear              5
#define UDraw_Pixel         6
#define UDraw_Line          7
#define UDraw_Rect          8
#define UDraw_Text          9
#define UDraw_Image         10
#define UGet_Size           11
#define USet_Anchor         12
#define USet_Auto           13
#define USet_Color_Clear    14
#define USet_Color_Draw     15
#define USet_Cursor         16
#define USet_Font           17
#define USet_Grid           18
#define USet_Pan            19
#define USet_Size           20
#define USet_Title          21
#define USet_Zoom           22
#define UWrite              23
#define UWriteLn            24

-- xTEvent
#define UAny                1
#define UTimeout            2
#define UKeyDown            3
#define UMouseButtonDown    4

-- xAnchor
#define ULeft       1
#define UCenter     2
#define URight      3
#define UBottom     1
#define UMiddle     2
#define UTop        3

-------------------------------------------------------------------------------

native type _{
    void output_pico (TPico arg) {
        switch (arg.tag) {
            case USet_Anchor: {
                // TODO: _12
                Pico_IO io = { PICO_SET_ANCHOR, .Set_Anchor = {arg._12._1.tag,arg._12._2.tag} };
                pico_output(io);
                break;
            }
            default:
                pico_output(*(Pico_IO*)&arg);
                break;
        }
    }

    int tosdl (int e) {
        switch (e) {
            case UAny:               return SDL_ANY;
            //case UTimeout:           return ???;
            case UKeyDown:           return SDL_KEYDOWN;
            case UMouseButtonDown:   return SDL_MOUSEBUTTONDOWN;
        }
        assert(0);
    }

    void toce (SDL_Event* e, TEvent* arg) {
        switch (e->type) {
            case SDL_KEYDOWN:
                // TODO: _3
                *arg = (TEvent) { UKeyDown, { ._3 = e->key.keysym.sym } };
                break;
            case SDL_MOUSEBUTTONDOWN: {
                int bt = e->button.button;
                int x  = e->button.x;
                int y  = e->button.y;
                // TODO: _4
                *arg = (TEvent) { UMouseButtonDown, { ._4 = {bt,{x,y}} } };
                break;
            }
        }
    }

    TEvent input_pico_TEvent (TPico arg) {
        SDL_Event e;
        switch (arg.tag) {
            case UEvent: {
                // TODO: _2
                pico_input(&e, (Pico_IO) {PICO_EVENT,.Event=arg._2});
                TEvent s;
                toce(&e, &s);
                return s;
            }
            case UEvent_Timeout: {
                // TODO: _3
                int ok = pico_input(&e, (Pico_IO) {
                    PICO_EVENT_TIMEOUT,
                    .Event_Timeout = { arg._3._1, arg._3._2 }
                });
                if (ok) {
                    TEvent s;
                    toce(&e, &s);
                    return s;
                } else {
                    return (TEvent) { UTimeout };
                }
                break;
            }
        }
    }

    void input_pico_Unit (TPico arg) {
        SDL_Event e;
        switch (arg.tag) {
            case UDelay:
                pico_input(&e, *((Pico_IO*)&arg));
                break;
            default:
                input_pico_TEvent (arg);
                break;
        }
    }
}

call _pico_open ()
-- TODO: pico_close()
