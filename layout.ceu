pico.set.font("tiny.ttf", 10)

val {{||}} = pico.pct-to-pos

func layout-to-rects (lay) {
    val COL = #lay[0]
    val LIN = #lay
    val ret = #[]
    loop l in {0 => LIN{ {
        loop c in {0 => COL{ {
            if lay[l][c] == #ret {
                val r :Rect = [[c,l],[nil,nil]]
                loop c' in {c => COL{ {
                    until lay[l][c'] /= #ret
                    set r.dim.w = (c' - c) + 1
                }
                loop l' in {l => LIN{ {
                    until lay[l'][c] /= #ret
                    set r.dim.h = (l' - l) + 1
                }
                set ret[+] = r
            }
        }
    }
    ret
}

func rects-to-real (rs, lin-col, parent) {
    val [px,py] = [w/c, h/l] where {
        val [l,c] = lin-col
        val [w,h] = parent or pico.get.size(:internal)
    }
    val rets = #[]
    loop [i,r:Rect] in rs->to.iter([:idx,:val]) {
        set rets[+] = [[x,y], [w,h]] where {
            val w = r.dim.w * px
            val h = r.dim.h * py
            val x = (r.pos.x * px) + (w/2)
            val y = (r.pos.y * py) + (h/2)
        }
    }
    rets
}

task Layout (lay) {
    set pub = layout-to-rects(lay)
    spawn {
        val rs = rects-to-real(pub, [#lay,#lay[0]])
        every :Pico.Draw {
            loop r in rs {
                pico.set.style(:Style.Stroke)
                pico.output.draw.rect(r)
            }
        }
    }
    await(|false)
}

test {
    do {
        println(:1)
        val lay = [
            [0, 1]
        ]
        val t = spawn Layout(lay)
        println(t.pub)
        assert(t.pub === #[
            [[0,0], [1,1]],
            [[1,0], [1,1]],
        ])
    }
    do {
        println(:2)
        val lay = [
            [0,0,1],
            [0,0,1],
            [2,2,3],
            [4,5,3],
        ]
        val t = spawn Layout(lay)
        println(t.pub)
        assert(t.pub === #[
            [[0,0],[2,2]],
            [[2,0],[1,2]],
            [[0,2],[2,1]],
            [[2,2],[1,2]],
            [[0,3],[1,1]],
            [[1,3],[1,1]]
        ])
    }
}
