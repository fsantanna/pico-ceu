native `pico_init(1);`
defer {
    native `pico_init(0);`
}

;; INPUT

var evt = @[]

var pico_input_delay
set pico_input_delay = func (ms) {
    `pico_input_delay($ms.Number);`
}

var pico_event_sdl_ceu = func (sdl, type) {
    var tp = 0
    var v1 = 0
    var v2 = 0
    var v3 = 0
    native ```
        SDL_Event* evt = (SDL_Event*) $sdl.Pointer;
        $tp.Number = evt->type;
        switch (evt->type) {
            case SDL_KEYDOWN:
                $v1.Number = evt->key.state;
                $v2.Number = evt->key.keysym.sym;
                break;
            case SDL_MOUSEBUTTONDOWN:
                $v1.Number = evt->button.button;
                $v2.Number = evt->button.x;
                $v3.Number = evt->button.y;
                break;
        }
    ```
    ifs {
        (tp == `#number SDL_KEYDOWN`) {
            set evt[#type]  = #keydown
            set evt[#state] = v1
            set evt[#sym]   = v2
        }
        (tp == `#number SDL_MOUSEBUTTONDOWN`) {
            set evt[#type]   = #mousebuttondown
            set evt[#button] = v1
            set evt[#x]      = v2
            set evt[#y]      = v3
        }
    }
}

var pico_input_event
set pico_input_event = func (type) {
    var sdl = `#pointer NULL`
    native ```
        SDL_Event sdl;
        pico_input_event(&sdl,$type.Number);
        $sdl.Pointer = &sdl;
    ```
    pico_event_sdl_ceu(sdl, type)
}

var pico_input_event_timeout
set pico_input_event_timeout = func (type, time) {
    var sdl = `#pointer NULL`
    var ok = false
    native ```
        SDL_Event sdl;
        $ok.Bool = pico_input_event_timeout(&sdl,$type.Number,$time.Number);
        $sdl.Pointer = &sdl;
    ```
    ok and pico_event_sdl_ceu(sdl, type)
}

;; OUTPUT

var pico_output_clear
set pico_output_clear = func () {
    `pico_output_clear();`
}

var pico_output_draw_pixel
set pico_output_draw_pixel = func (x,y) {
    `pico_output_draw_pixel((SDL_Point){$x.Number,$y.Number});`
}

var pico_output_draw_image
set pico_output_draw_image = func (x,y,img) {
    `pico_output_draw_image((SDL_Point){$x.Number,$y.Number}, (char*)$img.Pointer);`
}

var pico_output_present
set pico_output_present = func () {
    `pico_output_present();`
}

;; STATE

;; GET

var pico_state_get_size
set pico_state_get_size = func () {
    var w
    var h
    set w = 0
    set h = 0
    native ```
        SDL_Point sz;
        pico_state_get_size(&sz);
        $w.Number = sz.x;
        $h.Number = sz.y;
    ```
    [w,h]
}

;; SET

var pico_state_set_auto
set pico_state_set_auto = func (on) {
    `pico_state_set_auto($on.Bool);`
}

var pico_state_set_color_clear
set pico_state_set_color_clear = func (r,g,b,a) {
    `pico_state_set_color_clear((SDL_Color){$r.Number,$g.Number,$b.Number,$a.Number});`
}

var pico_state_set_color_draw
set pico_state_set_color_draw = func (r,g,b,a) {
    `pico_state_set_color_draw((SDL_Color){$r.Number,$g.Number,$b.Number,$a.Number});`
}

var pico_state_set_grid
set pico_state_set_grid = func (on) {
    `pico_state_set_grid($on.Bool);`
}

var pico_state_set_size
set pico_state_set_size = func (w,h) {
    `pico_state_set_size((SDL_Point){$w.Number,$h.Number});`
}

var pico_state_set_size_pixel
set pico_state_set_size_pixel = func (w,h) {
    `pico_state_set_size_pixel((SDL_Point){$w.Number,$h.Number});`
}

var pico_state_set_title
set pico_state_set_title = func (title) {
    `pico_state_set_title((char*)$title.Pointer);`
}

;; LOOP

var pico_loop
set pico_loop = func () {
    pico_state_set_auto(false)
    var old
    set old = `#number SDL_GetTicks()`
    while true {
        var now
        set now = `#number SDL_GetTicks()`
        var togo
        set togo = 40 - (now-old)
        if togo <= 0 {
            do {
                set evt[#type] = #frame
                set evt[#dt]   = 40
                broadcast ()
            }
            pico_output_clear()
            do {
                set evt[#type] = #draw
                broadcast ()
            }
            pico_output_present()
            set old = togo + now
        } else {
            var tmp = pico_input_event_timeout(`#number SDL_ANY`,togo)
            if tmp {
                broadcast ()
            }
        }
    }
}
