`pico_init(1);`
defer {
    `pico_init(0);`
}

var PICO-MPF = 40

;; DATA / ENUM

data :RGBA = [r,g,b,a]
data :XY   = [x,y]
data :WH   = [w,h]
data :Rect = [pos:XY, dim:WH]

data :Pico = []
data :Pico.Any   = []
data :Pico.Quit  = []
data :Pico.Frame = [ms]
data :Pico.Draw  = []

data :Pico.Key = [key]
data :Pico.Key.Dn = []
data :Pico.Key.Up = []

data :Pico.Mouse = [pos:XY]
data :Pico.Mouse.Motion = []
data :Pico.Mouse.Button = [but]
data :Pico.Mouse.Button.Dn = []
data :Pico.Mouse.Button.Up = []

enum {
    :HAnchor-Left  =`Left`,   :HAnchor-Center, :HAnchor-Right,
    :VAnchor-Bottom=`Bottom`, :VAnchor-Middle, :VAnchor-Top,
}

enum {
    :Mouse-Button-Left = `SDL_BUTTON_LEFT`,
    :Mouse-Button-Middle, :Mouse-Button-Right,
}

enum {
    :Key-A = `SDLK_a`,
    :Key-B, :Key-C, :Key-D, :Key-E, :Key-F, :Key-G, :Key-H, :Key-I, :Key-J,
    :Key-K, :Key-L, :Key-M, :Key-N, :Key-O, :Key-P, :Key-Q, :Key-R, :Key-S,
    :Key-T ,:Key-U, :Key-V, :Key-W, :Key-X, :Key-Y, :Key-Z,

    :Key-Right = `SDLK_RIGHT`,
    :Key-Left, :Key-Down, :Key-Up,

    :Key-Shift-Right = `SDLK_RSHIFT`,
    :Key-Shift-Left  = `SDLK_LSHIFT`,

	:Key-Escape = `SDLK_ESCAPE`,
}

;; INPUT

val pico-input-delay = func (ms) {
    `pico_input_delay($ms.Number);`
}

val pico-event-sdl-ceu = func (sdl, type) {
    var tp = :nil
    var t0 = :nil
    var t1 = :nil
    var t2 = :nil
    var n0 = 0
    var n1 = 0
    var n2 = 0
    ```
        SDL_Event* evt = (SDL_Event*) $sdl.Pointer;
        $tp.Tag = evt->type;
        switch (evt->type) {
            case SDL_KEYDOWN:
            case SDL_KEYUP:
                $t0.Tag  = evt->key.state;
                $t1.Tag  = evt->key.keysym.sym;
                break;
            case SDL_MOUSEBUTTONDOWN:
            case SDL_MOUSEBUTTONUP:
                $n0.Number = evt->button.x;
                $n1.Number = evt->button.y;
                $t2.Tag    = evt->button.button;
                break;
            case SDL_MOUSEMOTION:
                $n0.Number = evt->button.x;
                $n1.Number = evt->button.y;
                break;
        }
    ```
    val e = if is? (tp, `:tag SDL_QUIT`) {
        tags([], :Pico.Quit, true)
    } else {
        if is? (tp, `:tag SDL_MOUSEMOTION`) {
            tags([[n0,n1]], :Pico.Mouse.Motion, true)
        } else {
            if is? (tp, `:tag SDL_MOUSEBUTTONDOWN`) {
                tags([[n0,n1],t2], :Pico.Mouse.Button.Dn, true)
            } else {
                if is? (tp, `:tag SDL_MOUSEBUTTONUP`) {
                    tags([[n0,n1],t2], :Pico.Mouse.Button.Up, true)
                } else {
                    if is? (tp, `:tag SDL_KEYDOWN`) {
                        tags([t1], :Pico.Key.Dn, true)
                    } else {
                        if is? (tp, `:tag SDL_KEYUP`) {
                            tags([t1], :Pico.Key.Up, true)
                        } else {
println("-=-=-=-=-");
                            throw(:error)
                        }
                    }
                }
            }
        }
    }
    println(:pico-event-sdl-ceu, e)
    drop(e)
}

val pico-input-event = func (tag) {
    var sdl = `:pointer NULL`
    ```
        int tag_to_type (int tag) {
            switch (tag) {
                case CEU_TAG_Pico_Any:
                    return SDL_ANY;
                case CEU_TAG_Pico_Quit:
                    return SDL_QUIT;
                case CEU_TAG_Pico_Key_Dn:
                    return SDL_KEYDOWN;
                case CEU_TAG_Pico_Key_Up:
                    return SDL_KEYUP;
                case CEU_TAG_Pico_Mouse_Motion:
                    return SDL_MOUSEMOTION;
                case CEU_TAG_Pico_Mouse_Button_Dn:
                    return SDL_MOUSEBUTTONDOWN;
                case CEU_TAG_Pico_Mouse_Button_Up:
                    return SDL_MOUSEBUTTONUP;
                default:
                    assert(0 && "bug found : missing tag -> type");
            }
        }

        SDL_Event sdl;
        int type = tag_to_type($tag.Tag);
        pico_input_event(&sdl,type);
        $sdl.Pointer = &sdl;
    ```
    val e = pico-event-sdl-ceu(sdl, type)
    println(:pico-input-event, e)
    drop(e)
}

val pico-input-event-timeout = func (type, time) {
    var sdl = `:pointer NULL`
    var ok = false
    ```
        SDL_Event sdl;
        $ok.Bool = pico_input_event_timeout(&sdl,$type.Tag,$time.Number);
        $sdl.Pointer = &sdl;
    ```
    if ok {
        val e = pico-event-sdl-ceu(sdl, type)
        println(:pico-input-event-timeout, e)
        drop(e)
    } else {
        false
    }
}

;; OUTPUT

val pico-output-clear = func () {
    `pico_output_clear();`
}

val pico-output-draw-image = func (pos:XY,img,cache) {
    val x = pos.x
    val y = pos.y
    val xcache = cache || (cache == nil)
    `_pico_output_draw_image_cache((SDL_Point){$x.Number,$y.Number}, (char*)$img.Dyn->Vector.buf, $xcache.Bool);`
}

val pico-output-draw-line = func (p1:XY, p2:XY) {
    val x1 = p1.x
    val y1 = p1.y
    val x2 = p2.x
    val y2 = p2.y
    `pico_output_draw_line((SDL_Point){$x1.Number,$y1.Number},
                           (SDL_Point){$x2.Number,$y2.Number});`
}

val pico-output-draw-rect = func (r:Rect) {
    val x = r.pos.x
    val y = r.pos.y
    val w = r.dim.w
    val h = r.dim.h
    `pico_output_draw_rect((SDL_Rect){$x.Number,$y.Number,$w.Number,$h.Number});`
}

val pico-output-draw-oval = func (r:Rect) {
    val x = r.pos.x
    val y = r.pos.y
    val w = r.dim.w
    val h = r.dim.h
    `pico_output_draw_oval((SDL_Rect){$x.Number,$y.Number,$w.Number,$h.Number});`
}

val pico-output-draw-pixel = func (pos:XY) {
    val x = pos.x
    val y = pos.y
    `pico_output_draw_pixel((SDL_Point){$x.Number,$y.Number});`
}

val pico-output-draw-text = func (pos:XY, txt) {
    val x = pos.x
    val y = pos.y
    `pico_output_draw_text((SDL_Point){$x.Number,$y.Number}, $txt.Dyn->Vector.buf);`
}

val pico-output-present = func () {
    `pico_output_present();`
}

val pico-output-sound = func (path) {
    `pico_output_sound($path.Dyn->Vector.buf);`
}

val pico-output-write = func (txt) {
    `pico_output_write($txt.Dyn->Vector.buf);`
}

val pico-output-writeln = func (txt) {
    `pico_output_writeln($txt.Dyn->Vector.buf);`
}

;; STATE

;; GET

val pico-state-get-fps = func () {
    1000 / PICO-MPF
}

val pico-state-get-size = func () {
    var w = 0
    var h = 0
    ```
        SDL_Point sz;
        pico_state_get_size(&sz);
        $w.Number = sz.x;
        $h.Number = sz.y;
    ```
    [w,h]
}

val pico-state-get-size-image = func (img) {
    var w = 0
    var h = 0
    ```
        SDL_Point sz;
        pico_state_get_size_image((char*)$img.Dyn->Vector.buf, &sz);
        $w.Number = sz.x;
        $h.Number = sz.y;
    ```
    [w,h]
}

;; SET

val pico-state-set-fps = func (fps) {
    set PICO-MPF = 1000 / fps
}

val pico-state-set-anchor = func (h,v) {
    `pico_state_set_anchor($h.Tag,$v.Tag);`
}

val pico-state-set-auto = func (on) {
    `pico_state_set_auto($on.Bool);`
}

val pico-state-set-color-clear = func (clr:RGBA) {
    val r = clr.r
    val g = clr.g
    val b = clr.b
    val a = clr.a
    `pico_state_set_color_clear((SDL_Color){$r.Number,$g.Number,$b.Number,$a.Number});`
}

val pico-state-set-color-draw = func (clr:RGBA) {
    val r = clr.r
    val g = clr.g
    val b = clr.b
    val a = clr.a
    `pico_state_set_color_draw((SDL_Color){$r.Number,$g.Number,$b.Number,$a.Number});`
}

val pico-state-set-cursor = func (pos:XY) {
    val x = pos.x
    val y = pos.y
    `pico_state_set_cursor((SDL_Point){$x.Number,$y.Number});`
}

val pico-state-set-font = func (file, h) {
    `pico_state_set_font($file.Dyn->Vector.buf,$h.Number);`
}

val pico-state-set-grid = func (on) {
    `pico_state_set_grid($on.Bool);`
}

val pico-state-set-image-crop = func (r:Rect) {
    if r == nil {
        `pico_state_set_image_crop((SDL_Rect){0,0,0,0});`
    } else {
        val x = r.pos.x
        val y = r.pos.y
        val w = r.dim.w
        val h = r.dim.h
        `pico_state_set_image_crop((SDL_Rect){$x.Number,$y.Number,$w.Number,$h.Number});`
    }
}

val pico-state-set-pan = func (pos:XY) {
    val x = pos.x
    val y = pos.y
    `pico_state_set_pan((SDL_Point){$x.Number,$y.Number});`
}

val pico-state-set-size = func (dim:WH) {
    val w = dim.w
    val h = dim.h
    `pico_state_set_size((SDL_Point){$w.Number,$h.Number});`
}

val pico-state-set-size-image = func (dim:WH) {
    val w = dim.w
    val h = dim.h
    `pico_state_set_size_image((SDL_Point){$w.Number,$h.Number});`
}

val pico-state-set-size-pixel = func (dim:WH) {
    val w = dim.w
    val h = dim.h
    `pico_state_set_size_pixel((SDL_Point){$w.Number,$h.Number});`
}

val pico-state-set-title = func (title) {
    `pico_state_set_title($title.Dyn->Vector.buf);`
}

;; AUX

val pico-point-vs-rect? = func (pt:XY, r:Rect) {
    if pt.x < (r.pos.x-(r.dim.w/2)) {
        false
    } else {
        if pt.x > (r.pos.x+(r.dim.w/2)) {
            false
        } else {
            if pt.y < (r.pos.y-(r.dim.h/2)) {
                false
            } else {
                if pt.y > (r.pos.y+(r.dim.h/2)) {
                    false
                } else {
                    true
                }
            }
        }
    }
}

val pico-rect-vs-rect? = func (r1:Rect, r2:Rect) {
    val w2 = r2.dim.w / 2
    val h2 = r2.dim.h / 2
    val p1 = [r2.pos.x - w2, r2.pos.y - h2]
    val p2 = [r2.pos.x - w2, r2.pos.y + h2]
    val p3 = [r2.pos.x + w2, r2.pos.y + h2]
    val p4 = [r2.pos.x + w2, r2.pos.y - h2]
    if pico-point-vs-rect?(p1,r1) {
        true
    } else {
        if pico-point-vs-rect?(p2,r1) {
            true
        } else {
            if pico-point-vs-rect?(p3,r1) {
                true
            } else {
                if pico-point-vs-rect?(p4,r1) {
                    true
                } else {
                    false
                }
            }
        }
    }
}

val pico-collisions = func (trks, f-cmp) {
    val ret = #[]
    var i = 0
    xloop {
        xbreak if (i == #trks)
        var j = 0
        xloop {
            xbreak if (j == #trks)
            val r1 = trks[i]
            val r2 = trks[j]
            detrack(r1) { as x1 =>
                detrack(r2) { as x2 =>
                    if f-cmp(pub(x1), pub(x2)) {
                        set ret[#ret] = [r1, r2]
                    } else {
                        nil
                    }
                }
            }
        }
    }
    drop(ret)
}

;; LOOP

var pico-quit' = false

val pico-quit = func () {
    set pico-quit' = true
}

val max = func (v1, v2) {
    ((v1 > v2) && v1) || v2
}

val pico-loop = coroutine(coro () {
    pico-state-set-auto(false)
    var old = `:number SDL_GetTicks()`
    xloop {
println(:zzz)
        val now  = `:number SDL_GetTicks()`
        val togo = PICO-MPF - (now - old)
        if togo <= 0 {
            do {
                val e = tags([PICO-MPF], :Pico.Frame, true)
                yield(e) { as it => nil }
            }
            do {
                val e = tags([PICO-MPF], :frame, true)
                yield(e) { as it => nil }
            }
            pico-output-clear()
            do {
                val e = tags([], :Pico.Draw, true)
                yield(e) { as it => nil }
            }
            pico-output-present()
            set old = togo + now
        } else {
            nil
        }
        val e = pico-input-event-timeout(`:tag SDL_ANY`, max(0,togo))
println(:loop, e)
        if e {
println(:aaa)
            yield(e) { as it => nil }
        } else {
println(:bbb)
            nil
        }
    }
})
